version: "3.9"

services:
  db:
    image: postgres:16
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./qa-plataform/storage/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-qauser} -d ${POSTGRES_DB:-qa}"]
      interval: 5s
      timeout: 3s
      retries: 10


  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: unless-stopped

  api-gateway:
    build: ./services/api-gateway
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      LLM_PROVIDER: ${LLM_PROVIDER}
      KAFKA_BROKER: kafka:9092
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      responder-llm:
        condition: service_started
      scorer:
        condition: service_started

  responder-llm:
    build: ./services/responder-llm
    environment:
      LLM_PROVIDER: ${LLM_PROVIDER}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      OLLAMA_HOST: ${OLLAMA_HOST}
    expose:
      - "8001"
    ports:
      - "8001:8001"
    depends_on:
      kafka:
        condition: service_healthy

  scorer:
    build: ./services/scorer
    expose:
      - "8002"
    depends_on:
      kafka:
        condition: service_healthy

  traffic-gen:
    build: ./services/traffic-gen
    environment:
      TRAFFIC_RATE: ${TRAFFIC_RATE}
      TRAFFIC_DISTR: ${TRAFFIC_DISTR}
      LOGNORMAL_MU: ${LOGNORMAL_MU}
      LOGNORMAL_SIGMA: ${LOGNORMAL_SIGMA}
      PARETO_SHAPE: ${PARETO_SHAPE}
      API_URL: http://api-gateway:8000/ask
    depends_on:
      api-gateway:
        condition: service_started
      kafka:
        condition: service_healthy
    profiles:
      - "load"

volumes:
  db_data:
