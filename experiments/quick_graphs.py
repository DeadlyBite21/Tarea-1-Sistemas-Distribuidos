#!/usr/bin/env python3
"""
üìä GENERADOR DE GR√ÅFICOS R√ÅPIDO
Crea visualizaciones basadas en los datos disponibles
"""

import json
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import os
from datetime import datetime

# Configurar estilo
plt.style.use('seaborn-v0_8')
sns.set_palette("husl")

def load_lfu_results():
    """Carga los resultados LFU disponibles"""
    lfu_path = "../results/lfu_results.json"
    if os.path.exists(lfu_path):
        with open(lfu_path, 'r') as f:
            return json.load(f)
    return None

def create_lfu_analysis_plot(lfu_data, output_dir='plots'):
    """Crea an√°lisis visual del experimento LFU"""
    os.makedirs(output_dir, exist_ok=True)
    
    if not lfu_data:
        print("‚ùå No hay datos LFU disponibles")
        return
    
    # Extraer m√©tricas
    total_requests = lfu_data.get('total_requests', 0)
    cache_hits = lfu_data.get('cache_hits', 0)
    cache_misses = lfu_data.get('cache_misses', 0)
    hit_rate = lfu_data.get('hit_rate', 0) * 100
    evictions = lfu_data.get('evictions', 0)
    avg_response_time = lfu_data.get('avg_response_time', 0) * 1000  # ms
    current_size = lfu_data.get('current_size', 0)
    memory_usage = lfu_data.get('memory_usage', 0)
    
    # Crear figura con subplots
    fig, axes = plt.subplots(2, 3, figsize=(18, 12))
    fig.suptitle('üß™ An√°lisis Detallado - Experimento LFU (10,000 Preguntas)', fontsize=16, fontweight='bold')
    
    # 1. Pie chart: Hits vs Misses
    ax1 = axes[0, 0]
    labels = ['Cache Hits', 'Cache Misses']
    sizes = [cache_hits, cache_misses]
    colors = ['#2ecc71', '#e74c3c']
    
    wedges, texts, autotexts = ax1.pie(sizes, labels=labels, colors=colors, 
                                      autopct='%1.1f%%', startangle=90)
    ax1.set_title(f'üéØ Cache Hits vs Misses\\nTotal: {total_requests:,} requests')
    
    # 2. Barra de Hit Rate
    ax2 = axes[0, 1]
    bars = ax2.bar(['Hit Rate'], [hit_rate], color='#3498db', alpha=0.8)
    ax2.set_ylim(0, 100)
    ax2.set_ylabel('Porcentaje (%)')
    ax2.set_title(f'üìà Hit Rate: {hit_rate:.2f}%')
    
    # Agregar texto en la barra
    for bar in bars:
        ax2.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 2, 
                f'{hit_rate:.2f}%', ha='center', va='bottom', fontweight='bold', fontsize=12)
    
    # 3. M√©tricas de rendimiento
    ax3 = axes[0, 2]
    metrics_labels = ['Evictions', 'Cache Size', 'Memory Usage']
    metrics_values = [evictions, current_size, memory_usage]
    colors_metrics = ['#f39c12', '#9b59b6', '#1abc9c']
    
    bars3 = ax3.bar(metrics_labels, metrics_values, color=colors_metrics, alpha=0.7)
    ax3.set_title('üìä M√©tricas del Cache')
    ax3.set_ylabel('Cantidad')
    
    # Agregar valores en las barras
    for bar, value in zip(bars3, metrics_values):
        ax3.text(bar.get_x() + bar.get_width()/2, bar.get_height() + max(metrics_values)*0.01, 
                f'{value:,}', ha='center', va='bottom', fontweight='bold')
    
    # 4. Simulaci√≥n de timeline (basado en estimaciones)
    ax4 = axes[1, 0]
    
    # Simular progreso del hit rate durante el experimento
    time_points = np.linspace(0, 100, 20)  # 20 puntos en el tiempo
    simulated_hit_rate = []
    
    for t in time_points:
        # Simular curva de aprendizaje del cache
        if t < 10:  # Primeros 10% - cache vac√≠o
            rate = 0
        elif t < 30:  # 10-30% - calentamiento
            rate = (t - 10) / 20 * hit_rate * 0.3
        elif t < 70:  # 30-70% - crecimiento
            rate = hit_rate * 0.3 + (t - 30) / 40 * hit_rate * 0.5
        else:  # 70-100% - estabilizaci√≥n
            rate = hit_rate * 0.8 + (t - 70) / 30 * hit_rate * 0.2
        
        simulated_hit_rate.append(min(rate, hit_rate))
    
    ax4.plot(time_points, simulated_hit_rate, linewidth=3, color='#e67e22')
    ax4.fill_between(time_points, simulated_hit_rate, alpha=0.3, color='#e67e22')
    ax4.set_title('üìà Evoluci√≥n Estimada del Hit Rate')
    ax4.set_xlabel('Progreso del Experimento (%)')
    ax4.set_ylabel('Hit Rate (%)')
    ax4.grid(True, alpha=0.3)
    
    # 5. Comparaci√≥n con benchmarks te√≥ricos
    ax5 = axes[1, 1]
    
    policies = ['Sin Cache', 'FIFO B√°sico', 'LRU Promedio', 'LFU (Real)', 'LFU √ìptimo']
    theoretical_rates = [0, 5, 15, hit_rate, 35]  # Valores te√≥ricos
    colors_comp = ['#95a5a6', '#f39c12', '#3498db', '#2ecc71', '#27ae60']
    
    bars5 = ax5.bar(policies, theoretical_rates, color=colors_comp, alpha=0.8)
    ax5.set_title('üèÜ Comparaci√≥n con Benchmarks')
    ax5.set_ylabel('Hit Rate (%)')
    ax5.set_xticklabels(policies, rotation=45, ha='right')
    
    # Destacar el resultado real
    bars5[3].set_color('#e74c3c')
    bars5[3].set_alpha(1.0)
    
    # 6. An√°lisis de eficiencia
    ax6 = axes[1, 2]
    
    # Crear gr√°fico de dispersi√≥n: Eficiencia vs Costo
    efficiency = hit_rate
    cost = evictions / 1000  # Normalizar evictions
    
    ax6.scatter([cost], [efficiency], s=300, c='#e74c3c', alpha=0.8, edgecolors='black', linewidth=2)
    ax6.annotate('LFU Result', (cost, efficiency), xytext=(10, 10), 
                textcoords='offset points', fontweight='bold', fontsize=12)
    
    # Agregar l√≠neas de referencia
    ax6.axhline(y=20, color='orange', linestyle='--', alpha=0.7, label='Target Hit Rate')
    ax6.axhline(y=10, color='red', linestyle='--', alpha=0.7, label='Minimum Acceptable')
    
    ax6.set_xlabel('Costo (Evictions/1000)')
    ax6.set_ylabel('Eficiencia (Hit Rate %)')
    ax6.set_title('üéØ An√°lisis Costo-Eficiencia')
    ax6.legend()
    ax6.grid(True, alpha=0.3)
    
    plt.tight_layout()
    
    # Guardar
    plot_path = os.path.join(output_dir, 'lfu_detailed_analysis.png')
    plt.savefig(plot_path, dpi=300, bbox_inches='tight')
    print(f"üìä An√°lisis LFU guardado en: {plot_path}")
    
    return plot_path

def create_system_overview(lfu_data, output_dir='plots'):
    """Crea un overview del sistema completo"""
    os.makedirs(output_dir, exist_ok=True)
    
    fig, axes = plt.subplots(2, 2, figsize=(15, 10))
    fig.suptitle('üèóÔ∏è Overview del Sistema de Cache Distribuido', fontsize=16, fontweight='bold')
    
    # 1. Arquitectura del sistema
    ax1 = axes[0, 0]
    ax1.text(0.5, 0.8, 'üîÑ GENERATOR', ha='center', va='center', fontsize=14, 
             bbox=dict(boxstyle="round,pad=0.3", facecolor='lightblue'))
    ax1.text(0.5, 0.6, '‚¨áÔ∏è', ha='center', va='center', fontsize=20)
    ax1.text(0.5, 0.4, 'üß† CACHE (LFU)', ha='center', va='center', fontsize=14,
             bbox=dict(boxstyle="round,pad=0.3", facecolor='lightgreen'))
    ax1.text(0.5, 0.2, '‚¨áÔ∏è', ha='center', va='center', fontsize=20)
    ax1.text(0.5, 0.05, 'ü§ñ LLM (Gemini)', ha='center', va='center', fontsize=14,
             bbox=dict(boxstyle="round,pad=0.3", facecolor='lightyellow'))
    ax1.set_xlim(0, 1)
    ax1.set_ylim(0, 1)
    ax1.set_title('üèóÔ∏è Arquitectura del Sistema')
    ax1.axis('off')
    
    # 2. M√©tricas clave
    if lfu_data:
        ax2 = axes[0, 1]
        metrics = {
            'Total Requests': f"{lfu_data.get('total_requests', 0):,}",
            'Hit Rate': f"{lfu_data.get('hit_rate', 0)*100:.1f}%",
            'Cache Hits': f"{lfu_data.get('cache_hits', 0):,}",
            'Avg Response': f"{lfu_data.get('avg_response_time', 0)*1000:.1f}ms"
        }
        
        y_pos = np.arange(len(metrics))
        values = [lfu_data.get('total_requests', 0)/1000, 
                 lfu_data.get('hit_rate', 0)*100,
                 lfu_data.get('cache_hits', 0)/100,
                 lfu_data.get('avg_response_time', 0)*1000]
        
        bars = ax2.barh(y_pos, values, color=['#3498db', '#2ecc71', '#f39c12', '#e74c3c'])
        ax2.set_yticks(y_pos)
        ax2.set_yticklabels(list(metrics.keys()))
        ax2.set_title('üìä M√©tricas Clave del Experimento')
        
        # Agregar valores
        for i, (bar, metric_val) in enumerate(zip(bars, metrics.values())):
            ax2.text(bar.get_width() + max(values)*0.01, bar.get_y() + bar.get_height()/2,
                    metric_val, va='center', fontweight='bold')
    
    # 3. Timeline del experimento
    ax3 = axes[1, 0]
    if lfu_data and 'experiment_metadata' in lfu_data:
        metadata = lfu_data['experiment_metadata']
        duration = metadata.get('duration_minutes', 0)
        
        phases = ['Setup', 'Warm-up', 'Experiment', 'Analysis']
        phase_durations = [5, duration*0.1, duration*0.85, duration*0.05]
        colors_timeline = ['#95a5a6', '#f39c12', '#2ecc71', '#3498db']
        
        ax3.pie(phase_durations, labels=phases, colors=colors_timeline, autopct='%1.1f%%')
        ax3.set_title(f'‚è±Ô∏è Timeline del Experimento\\n(Total: {duration:.0f} min)')
    
    # 4. Configuraci√≥n del sistema
    ax4 = axes[1, 1]
    config_text = """
üîß CONFIGURACI√ìN:
‚Ä¢ Pol√≠tica: LFU (Least Frequently Used)
‚Ä¢ Cache Size: 100 elementos
‚Ä¢ TTL: 600 segundos
‚Ä¢ Rate Limit: 10 RPM
‚Ä¢ Dataset: 1.4M preguntas reales
‚Ä¢ LLM: Gemini 2.5 Flash
‚Ä¢ Intervalo: 6.5 segundos
    """
    
    ax4.text(0.05, 0.95, config_text, ha='left', va='top', fontsize=10,
             transform=ax4.transAxes, bbox=dict(boxstyle="round,pad=0.5", facecolor='#f8f9fa'))
    ax4.set_title('‚öôÔ∏è Configuraci√≥n del Sistema')
    ax4.axis('off')
    
    plt.tight_layout()
    
    # Guardar
    plot_path = os.path.join(output_dir, 'system_overview.png')
    plt.savefig(plot_path, dpi=300, bbox_inches='tight')
    print(f"üèóÔ∏è Overview del sistema guardado en: {plot_path}")
    
    return plot_path

def main():
    print("üé® GENERADOR DE GR√ÅFICOS R√ÅPIDO")
    print("=" * 50)
    
    # Cargar datos LFU
    print("üìä Cargando resultados LFU...")
    lfu_data = load_lfu_results()
    
    if lfu_data:
        print("‚úÖ Datos LFU cargados exitosamente")
        print(f"   üìà Hit Rate: {lfu_data.get('hit_rate', 0)*100:.2f}%")
        print(f"   üìä Total Requests: {lfu_data.get('total_requests', 0):,}")
        
        # Generar gr√°ficos
        print("\nüé® Generando visualizaciones...")
        create_lfu_analysis_plot(lfu_data)
        create_system_overview(lfu_data)
        
        print("\n‚úÖ Gr√°ficos generados exitosamente!")
        print("üìÅ Archivos disponibles en 'plots/':")
        print("   üìä lfu_detailed_analysis.png")
        print("   üèóÔ∏è system_overview.png")
        
    else:
        print("‚ùå No se encontraron datos LFU")
        print("üí° Aseg√∫rate de haber ejecutado el experimento LFU")

if __name__ == "__main__":
    main()